42. Create and Understand Blazor Project Structure

-- NavMenu.razor --

-> add NavBars	: Login		, Register	, Authors	, Books
-> add icons	: oi-globe	, oi-book	, oi-plus	, oi-list-rich	

﻿44. Setup HTTP Client And Service Repositories

-- BookStore_UI --

Create folders:
-> Services		: BaseRepository
-> Contracts	: IBaseRepository
-> Static		: EndPoints


-- EndPoint.cs --
-> create endpoints for : BaseUrl, AuthorUrl, BookUrl, LoginUrl, RegisterUrl

-- IBaseRepository.cs --

Task<IList<T>>	GetAll(string url)
Task<T>			GetbyId(string url, int id) 
Task<bool>		Create(string url, T obj)
Task<bool>		Delete(string url, int id)
Task<T>			Update(string url, int id, T obj) 


-- BaseRepository.cs --
-> GetAll(), GetbyId(), Create(), Update(), Delete()


45. Setup User Registration API Endpoint

-- BookStore-API -> DTOs --

Validation: UserDTOs 


-- Controllers -> AuthorController.cs --

-> add [Route] to Actions that have the same Verbs so we will not have conflicts

[Route("login")]
[Route("register")]

[HttpPost]
-> add Route["register"]
-> ProducesResponseType : 200, 500
-> Register([FromBody] UserDTO userDTO)
    -> location 
    -> put all in a try catch block
    -> new IdentityUser() { UserName = userName };
    -> var userCreated = await _userManager.CreateAsync(newUser);
    -> check if the creation is success, if not put userCreated.Error in a foreach and diplay them 
    -> return ok()

-> add documentation to the Action methods


46. Setup User Registration Form

-- BookStore_UI --

-> add RegisterEndpoint : RegisterUrl = $"{BaseUrl}/Users/Register/"

-> Models:	RegisterModel.cs	(UserName, Password, ConfirmedPassword)
			LoginModel.cs		(UserName, Password)

[Required]      : UserName, Password, ConfirmedPassword
[Diplay]        : UserName
[StringLength]  : Password
[Compare]       : ComparePassword


Services    : IAuthenticationRepository.cs (Register)
Contracts   : AuthenticationRepository.cs  (Register)


-- AuthenticationRepository.cs --

-> AuthentificationRepository : BaseRepository<RegisterModel>, IAuthentificationRepository
-> add ctor so can be initialize in the base class


-- Pages -> Users -> Register.razor --

UI:    

inject IAuthorrepository _authorRepo
inject NavigationManager navManager


-> add card : card-title 
			  display msg if registration failed
			  card-body  -> <EditForm>	-> 3 <div> : <label>, <InputText>, <ValidationMessage For="">
										-> <button type="submit">
										-> UserName, Password, ConfirmedPassword	

@code: 

RegisterModel registerModel = new();
bool isSuccess = true;

private void HandleRegistration()
{
    isSuccess = await _authorRepo.Register(registerModel);
    if(isSuccess)
    {
        navManager.NavigateTo("/");
    }
}


47. Setup User Login - Extend Blazor Authentication Provider

Static -> LoginUrl          
Models -> LoginModel.cs     : string UserName, string Password
       -> TokenResponse.cs  : string Token

-> install LocalStorage, Tokens.JWT

-- Startup.cs -

services.AddScoped<JwtSecurityTokenHandler>();
services.AddTransient<IAuthentificationRepository, AuthentificationRepository>();

-- BookStore_UI.Servicies --

IAuthenticaionStateRepository.cs :

-> Task<bool> Login(LoginModel user)
-> Task<bool> Register(RegisterModel user)
-> Task Logout()

AuthenticaionStateRepository.cs :

ctor: ILocalStorageService, IHttpFactoryClient, ApiAuthenticationStateProvider


            // create http request
            // put the Login model in the request.Content
            // create the HttpClient
            // recieve the httpResponse
            // check if the response status code is OK()
            // get the token as string
            // deserialize the token as TokenResponse obj
            // LoggedIn()
            // set the value for Authorization header for the HTTP request

Login():
    -> create requestMessage and pass httpMethod.Post and LoginUrl
    -> Serialize the user object and put it in request.Content
    -> create HttpClient : var client = _httpClient.CreatClient()
    -> create a HttpResponseMessage
    -> check the status code of response
    -> get the token as string 
    -> deserialize the token as TokenResponse obj 
    -> StoreToken : await _authStateProvider.LoggedIn();
    -> set the value for Authorization header for the HTTP request : 
        client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("bearer", token.Token);
    -> return true

Logout()
    -> remove token : await _localStorage.RemoveItemAsync("authToken");
    -> _authStateProvider.LoggedOut(); 

Register()
    -> create requestMessage and pass httpMethod.Post and LoginUrl
    -> Serialize the user object and put it in request.Content
    -> create HttpClient : var client = _httpClient.CreatClient()
    -> create a HttpResponseMessage
    -> check the status code of response
    -> return true


-- BookStore_UI.Providers -> ApiAuthenticationStateProvider.cs --

-> override async Task<AuthenticationState> GetAuthenticationStateAsync()
-> async Task LoggedIn()
-> void LoggedOut()
-> IList<Claim> ParseClaims(JwtSecurityToken tokenContent


GetAuthenticationStateAsync():
-> get token from local storage as string
-> check if there is a token, return an empty AuthenticationState, ClaimsPrincipal, ClaimsIdentity
-> convert the string token to JwtSecurityToken
-> check if the token is valid: tokenContent.ValidTo
    -> remove token from localStorage
    -> return an empty AuthenticationState, ClaimsPrincipal, ClaimsIdentity 
-> construct the Claims from jtw: ParseClaims
-> new ClaimsPrincipal(new ClaimsIdentity(claims, "jwt"));
-> return new AuthenticationState(user);        


LoggedIn():
-> get token as string from LocalHost
-> convert token to JwtSecurityToken
-> get the claims from token
-> new ClaimsPrincipal(new ClaimsIdentity(claims, "jwt"));
-> Task.FromResult(new AuthenticationState(user));
-> NotifyAuthenticationStateChanged(authState);

LoggedOut():
-> create and empty ClaimsPrincipals
-> Task.FromResult(new AuthenticationState(nobody));
-> NotifyAuthenticationStateChanged(authState);


Dictionary:

IHttpClientFactory  : A factory abstraction for a component that can create System.Net.Http.HttpClient
                      instances with custom configuration for a given logical name

AuthenticationStateProvider: Provides information about the authentication state of the current user

JwtSecurityTokenHandler: designed for creating and validating Json Web Tokens. 
                         http://tools.ietf.org/html/rfc7519, http://www.rfc-editor.org/info/rfc7515

AuthenticationState: provides information about the currently authenticated user, if any


48. Setup User Login - Form and Logic

-- Pages -> Users -> Login.razor --

UI:
-> add card : card-title 
			  display msg if registration failed
			  card-body  -> <EditForm>	-> 3 <div> : <label>, <InputText>, <ValidationMessage For="">
										-> <button>
										-> UserName, Password, ConfirmedPassword			 
				
@code: 
LoginModel loginModel = new();
bool isSuccess = true;

private void HandleRegistration()
{
    isSuccess = await _authorRepo.Login(loginModel);
    if(isSuccess)
    {
        navManager.NavigateTo("/");
    }
}


-- app.razor --

<RouteView> -> <AuthorizeRouteView>
->rap the <LayoutView> into a <CascadingAuthenticationState>


-- NavMenu.razor --

<AuthorizeView>
    <Authorized>
        <NavLink> @contex.User.Identity.Name </NavLink>
        <NavLink> Log Out </NavLink>
    </Authorized>

    <NotAuthorized>
        <NavLink> Log In </NavLink>
        <NavLink> Register </NavLink>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Administrator">
    <NavLink> ADMIN LINK </NavLink>
</AuthorizeView>

<AuthorizeView Roles="Customer">
    <NavLink> CUSTOMER LINK </NavLink>
</AuthorizeView>

-- Pages -> Users -> Logout.razor --

@code:
-> OnInitializedAsync()
    -> _authRepo.Logout()
    -> navigate to Home


Dictionary :

Authentication  : check if the JWT is valid
Authorization   : check if the user has permisions


AuthenticationState         : provides information about the currently authenticated user, if any.
AuthenticationStateProvider : provides information about the authentication state of the current user

-> event AuthenticationStateChangedHandler :
    -> An event that provides notification when the AspNetCore.Components.Authorization.AuthenticationState
       has changed. For example, this event may be raised if a user logs in or out.

-> abstract Task<AuthenticationState> GetAuthenticationStateAsync():
    -> Asynchronously gets an AspNetCore.Components.Authorization.AuthenticationState
       that describes the current user
    -> A task that, when resolved, gives an AspNetCore.Components.Authorization.AuthenticationState
       instance that describes the current user.

-> void NotifyAuthenticationStateChanged(Task<AuthenticationState> task):
    -> Raises the AspNetCore.Components.Authorization.AuthenticationStateProvider.AuthenticationStateChanged
       event


HttpContext.User -> AuthenticationStateProvider Service -> AuthorizeView
                                                        -> CascadingAuthenticationState


<AuthorizeView> : component selectively displays UI content depending on whether the user is authorized
                  exposes a context variable of type AuthenticationState, which you can use to access 
                  information about the signed-in user
                  -> protects specific parts with in a page or child components
<Authorized>    : -> protects routable components
<NotAuthorized> : -> 


https://www.youtube.com/watch?v=qu581omBjw0&ab_channel=kudvenkat

Authentication : Who is the user
Authorizatrion : what the user can and cannot do


Role Based Authorization:

<AuthorizeView Roles = "administrator, manager">
    <p>
        Display if the logged in suer is in the adminstrator or manager role
    </p>
</AuthorizeView>


Policy Based Authorization:

<AuthorizeView Policy="admin-policy">
    <p>
        Displayed if the logger in user satisfies admin-policy
    </p>
</AuthorizeView>


https://www.youtube.com/watch?v=CmsfLjXiUDs&ab_channel=kudvenkat

@attribute [Authorize]: check if the user is authenticated

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <NotAuthorized>
                <p>You are not authorized to reach thus page.</p>
            </NotAuthorized>
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>   
    </NotFound>
</Router>


Role Based Authorization:

@page "/"
@attribute [Authorize(Roles ="administrator, manager"]

<p>
    Only users in administrator or manager role are allowed 
</p>


Policy Based Authorization:

@page "/"
@attribute [Authorize(Policy ="admin-policy"]

<p>
    Only users who satisfie admin-policy are allowed access
</p>