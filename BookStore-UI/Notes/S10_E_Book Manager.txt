59. Setup Book Repository and Service

-> Servicies -> BookRepository.cs
			 -> Contracts -> IBookRepository.cs

-> add ctor: IHttpClientFactory, ILocalStorageService

-- Startup.cs --

services.AddTransient<IBookRepository, BookRepository>()


60. Setup List Books

-> CTRL + Click to go to the class 


-- BookStore-UI -> Pages -> Books.razor --

UI:
-> [Authorize]
-> add DI: IBookRepository, NavigationManager
-> @if(model is null){...}
-> else : -> add Create Book button
		  -> @if(Model.Count <1) 
		  -> table-responsive : -> 5<th> -> blank, Title, Price, Author, blank
								-> foreach : picture, Title, Price, Author, 3 buttons: view, update, delete

-> put Create, Update, Delete buttons in <AuthorizeView Roles="Administrator">


@code:
-> IList<BookModel>
-> OnInitilizeAsync()
	

61. Setup View Book

-> create a component : BackToList()

-> Id<1
-> Model is null
-> row :
	-> Table col-6	: 5* (tr>2*td) : Title, Author(if Model.null -> no Author, else -> href)	
					  Summary, Published Year, ISBN

	-> col-4		: <img src="/images/@Book.Image" style="height:300px; width:300px">
					  <h3>class="text-center text-info">@Book.Price</h3>

<a href="/books" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
</a>


62-63. Setup Create Book

-> DropDownList		: https://www.youtube.com/watch?v=wf9oQ6-fttM&ab_channel=BrianLagunas

-- BookStore_UI.Servicies --

-- IFileUpload.cs --

public Task UploadFile(Stream file, string picName);
public void RemoveFile(string picName);


-- FileUpload.cs --

RemoveFile():
-> get the path
-> if the path Exists, Delete it


UploadFile();
-> get the path
-> create a buffer , bytesRead, totalRead, FileStream(path, FileMode.Create);
-> while(bytesRead != 0)
	totalRead += bytesRead;
	await fs.WriteAsync(buffer);


-- Pages-> 
UI:

@attribute [Authorize(Role = Administrator)]

IBookRepository, IAuthorRepository, IFileUpload, NavigationManager, IToastService

if(!isSuccess)

<EditForm> -> Title, ISBN, Price, Authors (<select>, Authors!= null), Summary
			  <img> : if(isInvalidFileType), if(!string.IsNullOrWhiteSpace(imageDataURL)), 

			-> <button type="submit"> Create Book
			-> BackToList

Code:

public Book Book = new();
public IList<Author> Authors;
private IBrowserFile file;
private bool isSuccess = true;
private bool isInvalidFileType = false;
private string imageDataURL;
private Stream msFile;


-> OnInitializedAsync()
	-> get Books

-> HandleCreate()
	-> check if the isInvalidFileType == false
		-> check if file is null
			-> get the extention of the fileName
			-> create pic Id with a new GUID, replace "-" from the guid
			-> picName= id + extention

			-> UploadFile(sFile, picName);;
			-> Book.Image = picName

		-> _repoBook.Create(...);
		-> if(isSuccess)
			-> use toastService to show Create Succeded


-> HandleFileSelection(InputFileChangeEventArgs e)
	-> get the file 
	-> check it the file is not null
		-> get the extention of the file
		-> check if the extention is : "jpg", "png", "jpeg"
			-> sFile = file.OpenReadStream();
			-> resizedImageFile

			-> var buffer = new byte[resizedImageFile.Size];
			-> await resizedImageFile.OpenReadStream().ReadAsync(buffer);

			-> convert img into ToBase64String
			-> change the imageBase64Data fromat: string.Format("data:image/png;base64,{0}", imageBase64Data);
			-> isInvalidFileType = false;
		-> else:
			-> isInvalidFileType = true;
			-> imageDataURL = string.Empty;
	-> else 
		-> isInvalidFileType = false;


Dictionary:

using Microsoft.AspNetCore.Hosting;

IHostEnvironment: Provides information about the hosting environment an application is running in
-> ApplicationName 
-> ContentRootFileProvider
-> ContentRootPath 
-> EnvironmentName

IWebHostEnvironment: Provides information about the web hosting environment an application is running in
-> WebRootPath
-> WebRootFileProvider


using System.IO;

File:  Provides static methods for the creation, copying, deletion, moving, and opening 
	   of a single file, and aids in the creation of System.IO.FileStream objects
	   
-> ReadAllText	: Opens a text file, reads all the text in the file, and then closes the file.
-> WriteAllText : Creates a new file, writes the specified string to the file, and then closes
				  the file. If the target file already exists, it is overwritten.
-> Move			: 
-> Delete		: 
-> Exists		: 

Stream: Provides a generic view of a sequence of bytes. This is an abstract class

Methods:
-> Read  : When overridden in a derived class, reads a sequence of bytes from the current
		   stream and advances the position within the stream by the number of bytes read.

-> Write : When overridden in a derived class, writes a sequence of bytes to the current
           stream and advances the current position within this stream by the number of
           bytes written.

-> Seek  : When overridden in a derived class, sets the position within the current stream.

-> Flush : When overridden in a derived class, clears all buffers for this stream and causes
           any buffered data to be written to the underlying device.

-> CopyTo: Reads the bytes from the current stream and writes them to another stream.

Properties:
-> Position	: When overridden in a derived class, gets or sets the position within the current stream
-> Lenght	: When overridden in a derived class, gets the length in bytes of the stream.


FileStream: Initializes a new instance of the System.IO.FileStream class with the specified
			path and creation mode.

FileMode.CreateNew		: create new file, if the file exists throw exeption
FileMode.Create			: create new file(CreateNew), if the file exists overwrite it(Truncate)
FileMode.Open			: open the file, if doesn't exists throw exeption
FileMode.OpenOrCreate	: open the file if exists, if not create it
FileMode.Truncate		: open the file and after opening make the size 0 bytes
FileMode.Append			: open a file if exists and seeks to the end of the file, or creates a new one


64. Setup Update Book

UI:

@attribute [Authorize(Roles = "Administrator")]

IBookRepository, IAuthorRepository, IFileUpload, NavigationManager, IToastService

if(!isSuccess)
if(Id<1)
if(BookModel == null)
else
	<EditForm> -> Title, ISBN, Price, Authors (<select>, Authors!= null), Summary
				 <img> : if(isInvalidFileType), if(!string.IsNullOrWhiteSpace(imageDataURL)), 
						 if (!string.IsNullOrWhiteSpace(Model.Image))	 

			  -> <button type="submit"> Submit Changes
			  -> BackToList

Code:
[Parameter] Id

private Book Model = new Book();
private IList<Author> Authors;
private IFileListEntry file;
private bool isSuccess = true;
private bool isInvalidFileType = false;
private bool isFileChanged = false;
private string imageDataURL;

-> OnInitializedAsync()
	-> get Model
	-> get Authors

-> HandleUpdate()
	-> check if the isInvalidFileType == false
		-> check if file is null
			-> get the extention of the fileName
			-> create pic Id with a new GUID, replace "-" from the guid
			-> picName= id + extention

			-> remove image from Book.Image
			-> UpLoadFile(file,picName);
			-> Book.Image = picName
		else
			-> if(isFileChanged && file == null)
				-> removeFile
				-> Book.Image = string.Empty
		-> _repoBook.Update(...);
		-> if(isSuccess)
			-> use toastService to show Update Succeded


-> HandleFileSelection(IFileListEntry[] files)
	-> get the first file
	-> check it the File is no null
		-> get the name of the file
		-> check if the extention is : "jpg", "png", "jpeg"
			-> create a MemoryStream obj so we can Copy the Data from the Image
			-> copy the data from the Image

			-> create a StreamReader object with the file.Data in it
			-> convert img to Base64String
			-> change the imageBase64Data fromat: string.Format("data:image/png;base64,{0}", imageBase64Data);
			-> isInvalidFileType = false;
		-> else:
			-> isInvalidFileType = true;
			-> imageDataURL = string.Empty;
	-> else 
		-> isInvalidFileType = false;


65. Setup Delete Book


