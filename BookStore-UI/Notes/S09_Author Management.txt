50. Setup Author Repository and Service

-- BookStoreApi-UI --

AuthorModel.cs : Id, FirstName, LastName, Bio, list of Books
-> put validations 

IAuthorRepository.cs	:  
AuthorRepository.cs		:

-- Startup.cs --
-> inject the DI : IAuthorRepository, AuthorRepository


51. Setup List Authors

-- Pages -> Authors -> Author.razor --

UI:
create a table with 3 lines : First Name, Last Name, Actions(3 <a>: view, edit, delete)

@code:
-> list of Authors
-> OnInitializedAsync()
	-> get the authors


52. Setup View Author

BookModel.cs: Id, Title, Yaer, Isbn, Summary, Image, Price, AuthorId, Author

-- Authors -> BookModel.cs --

UI:
-> display ErrorComponent if author Model is null
-> author Table : 
-> display something if there are no books
-> add a card to diaply the books
-> create a button to go back to List of authors 

@code:
-> declare parameter Id
-> declare author Model
-> OnInitializedAsync()
	-> get author by Id
-> BackToList()


53. Setup Update Author

-> create an Error Component

-- Update.razor --

-> display InfoComponent if author Model is null
-> display ErrorComponent if iSuccess is false
-> Card -> <EditForm>	: FirstName, LastName, Bio (3 <div>)
		-> <button>		: Update Author
-> button -> BackToList


@code:
-> declare parameter Id
-> declare author Model
-> OnInitializedAsync()
	-> get author by Id
-> OnUpdateSubmit()
-> BackToList() 

54. Setup Delete Author 

UI:

-> add ErrorComponent
-> Card :	<EditForm>	-> 3 div (First Name, Last Name, Bio) 
						-> create a button to go back to the Author List


code:

-> create AuthorModel object
-> bool isSuccess
-> OnCreateSubmit()
	-> isSuccess -> BackToList()
-> BackToList()



56. Essential Layout Fixes and Additions

-- MainLayout.razor --

-> put @body in <card>

-> remove all the <card> in the .razor Pages
-> put Authorization on every .razor Page :	 
-> hide the Create, Update, Delete button from Customer role


57. Fix Author-Book JSON Response

-- BookStore-API -> Services -> AuthorRepository.cs --

FindAll()
FindById(int id)

-> include .Newtonsoftjson

-- Startup.cs --

services.AddControllers()
        .AddNewtonsoftJson(op => op.SerializerSettings.ReferenceLoopHandling 
                                    = Newtonsoft.Json.ReferenceLoopHandling.Ignore);

-> what .Ignore does ?
						 






