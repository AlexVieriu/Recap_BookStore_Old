@page "/books/create"

@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _bookRepo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager
@inject IToastService _toastService


<h4>Create Book</h4>
<br />
<br />

@if (!isSuccess)
{
    <ErrorComponent Message="Couldn't create the Book" />
}

<EditForm Model="Book" OnValidSubmit="HandleCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Book Title</label>
        <InputText @bind-Value="Book.Title" id="title" class="form-control" />
    </div>

    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText @bind-Value="Book.Isbn" id="isbn" class="form-control" />
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Book.Price" class="form-control" id="price" />
    </div>

    <div class="form-group">
        <label for="author">Authors</label>
        <select @bind="Book.AuthorId" class="form-control" id="author">
            <option value="">-- Select Author --</option>
            @if (Authors != null)
            {
                foreach (var author in Authors)
                {
                    <option value="@author.Id">@author.FirstName @author.LastName</option>
                }
            }
        </select>
    </div>

    <div class="form-group">
        <label for="summary">Sumarry</label>
        <InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary" />
    </div>

    <div class="row m-1">
        <div class="col-3">
            <InputFile OnChange="HandleFileSelection" class="custom-file-input" />
            <label class="custom-file-label">Choose file...</label>
        </div>

        <div class="col d-flex justify-content-center">
            @if (isInvalidFileType)
            {
                <ErrorComponent Message="The file is not a image, please select a image" />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" />
            }
        </div>
    </div>

    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Create Book
    </button>

    <a href="/books" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </a>
</EditForm>


@code{
    public Book Book = new();
    public IList<Author> Authors;
    private IBrowserFile file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private string imageDataURL;
    private Stream sFile;


    protected override async Task OnInitializedAsync()
    {
        Authors = await _authorRepo.GetAll(Endpoints.AuthorUrl);
    }

    private async Task HandleCreate()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                await _fileUpload.UploadFile(sFile, picName);

                Book.Image = picName;
            }

            isSuccess = await _bookRepo.Create(Endpoints.BookUrl, Book);

            if (isSuccess)
            {
                _toastService.ShowSuccess("Book Created Successfully", "");
                _navManager.NavigateTo("/books");
            }
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (file != null)
        {
            var ext = Path.GetExtension(file.Name);
            if (ext.Contains("jpg") || ext.Contains("png") || ext.Contains("jpeg"))
            {
                sFile = file.OpenReadStream();

                var resizedImageFile = await file.RequestImageFileAsync("image/png", 100, 100);

                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                var imageBase64Data = Convert.ToBase64String(buffer);
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }
}