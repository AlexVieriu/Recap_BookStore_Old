@page "/books/create"

@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _bookRepo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager


<h4>Create Book</h4>
<br />
<br />

@if (!isSuccess)
{
    <ErrorComponent Message="Couldn't create the Book" />   
}

<EditForm Model="Book" OnValidSubmit="HandleCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Book Title</label>
        <InputText id="title" class="form-control" @bind-Value="Book.Title" />
    </div>

    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText id="isbn" class="form-control" @bind-Value="Book.Isbn" />
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Book.Price" class="form-control" id="price" />
    </div>

    <div class="form-group">
        <label for="author">Authors</label>
        <InputSelect Value="Book.AuthorId" class="form-control" id="author">
            <option value="">-- Select Author --</option>
            @if (Authors is not null)
            {
                foreach (var author in Authors)
                {
                    <option value="@author.Id">@author.FirstName @author.LastName</option>
                }
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="summary">Sumarry</label>
        <InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary" />
    </div>

    <div class="form-group">
        <label for="bookcover">Book Cover Photo</label>
        <BlazorInputFile.InputFile OnChange="HandleFileSelection" />
        @if (isInvalidFileType)
        {
            <ErrorComponent Message="The file is not a image, please select a image" />
        }
        @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px;width:100px" />
        }
    </div>



    <button class="btn btn-outline-success" type="submit">
        <span class="oi oi-pencil"></span> Create Book
    </button>

    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>


@code{
    public BookModel Book { get; set; }
    public IList<AuthorModel> Authors { get; set; }

    private IFileListEntry file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private string imageDataURL;


    protected override async Task OnInitializedAsync()
    {
        Authors = await _authorRepo.GetAll(Endpoints.AuthorUrl);
    }

    private async Task HandleCreate()
    {
        var ext = Path.GetExtension(file.Name);
        var pickId = Guid.NewGuid().ToString().Replace("-","");
        var picName = $"{pickId}{ext}";

        await _fileUpload.UploadFile(file, picName);

        Book.Image = picName;

        if (!isInvalidFileType)
        {
            isSuccess = await _bookRepo.Create(Endpoints.BookUrl, Book);

            if (isSuccess)
                BackToList();
        }
    }

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file is not null)
        {
            var name = file.Name;
            if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(ms.ToArray());
                imageDataURL = string.Format("data:image/png:base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/books");
    }
}