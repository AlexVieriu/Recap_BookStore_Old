@page "/authors/create"

@attribute [Authorize(Roles ="Administrator")]

@inject IAuthorRepository _authorRepo
@inject NavigationManager _navManager

<h4>Create Author</h4>

@if (isSuccess == false)
{
    <ErrorComponent Message="The Author wasn't created"/>    
}

else
{
    <div class="card col-6 p-4">
        <EditForm Model="Author" OnValidSubmit="OnCreateSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="firstname">First Name</label>
                <InputText class="form-control" @bind-Value="Author.FirstName" id="firstname" />
                <ValidationMessage For="@(()=> Author.FirstName)" />
            </div>

            <div class="form-group">
                <label for="lastname">Last Name</label>
                <InputText class="form-control" @bind-Value="Author.LastName" id="lastname" />
                <ValidationMessage For="@(()=> Author.LastName)" />
            </div>

            <div class="form-group">
                <label for="bio">Biography</label>
                <InputTextArea class="form-control" @bind-Value="Author.Bio" id="bio" />
                <ValidationMessage For="@(()=> Author.Bio)" />
            </div>

            <input type="submit" class="btn btn-primary m-1" value="Create Author" />
        </EditForm>
    </div>

    <br />
    <button class="btn btn-secondary" @onclick="BackToList">
        <span class="oi oi-media-step-backward"></span> Back To List
    </button>
}

@code{
    public AuthorModel Author { get; set; } = new();
    private bool isSuccess = true;

    private async Task OnCreateSubmit()
    {
        isSuccess = await _authorRepo.Create(Endpoints.AuthorUrl, Author);

        if (isSuccess)
            BackToList();
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors");
    }
}