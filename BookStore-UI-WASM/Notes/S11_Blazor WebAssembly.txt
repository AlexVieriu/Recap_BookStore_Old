69. Blazor WebAssembly Introduction

-> creat a WASM project with Proggresive Web App checked


70. Transferring Blazor Server Code to Blazor WASM

-> Contracts, Models, Pages, Providers, Services, Shared, Static

Error:  Unhandled exception rendering component: Cannot provide a value for property 
'AuthorizationPolicyProvider' on type 'Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView+AuthorizeRouteViewCore'. 
There is no registered service of type 'Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider'.

Solution: 

-- Program.cs --

builder.Services.AddOptions();
builder.Services.AddAuthorizationCore();

.AddOptions()			: Adds services required for using options
.AddAuthorizationCore()	: Adds authorization services to the specified 
						  Microsoft.Extensions.DependencyInjection.IServiceCollection


71. Modify Code for Blazor WebAssembly

-> delete FileUpload, IFileUpload (we don't need them)


72. Essential Layout Fixes and Additions

-- wwwroot -> idex.html --

<link href="_content/Blazored.Toast/blazored-toast.css" rel="stylesheet" />

-> extend our API


73. File Upload Support (Create and View)

-> Create Css files for every CRUD razor page(ex: Create.razor.css)
-> change the size of the img

-> add prop File to classes: 

BookStore-API : BookDTO, BookCreateDTO, BookUpdateDTO

BookStore-UI, BookStore-UI-WASM : Book.cs

-- BookStore-API --
-> create Upload file for the images


-- BookStore-UI-WASM -> Pages -> Books --

Create.razor:
-> delete _fileUpload

-> HandleCreate()
	var ext = Path.GetExtension(file.Name);
    var picId = Guid.NewGuid().ToString().Replace("-", "");
    var picName = $"{picId}{ext}";
                
    Book.Image = picName;
    var buffer = new byte[file.Size];
    await file.OpenReadStream().ReadAsync(buffer);
    Book.File = Convert.ToBase64String(buffer);

-> HandleFileSelection()
    sFile = file.OpenReadStream();

    var resizedImageFile = await file.RequestImageFileAsync("image/png", 90, 90);

    var buffer = new byte[resizedImageFile.Size];
    await resizedImageFile.OpenReadStream().ReadAsync(buffer);

    var imageBase64Data = Convert.ToBase64String(buffer);
    imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
    isInvalidFileType = false;


View.razor:
-> <img src="@string.Format("data:image/png;base64,{0}", Book.File)" />


-- BookStore-API --

IBookRepository.cs  : Task<string> GetImageFileName(int id)
BookRepository.cs   : Task<string> GetImageFileName(int id)

{
    var book = await _db.Books.AsNoTracking()
                              .FirstOrDefaultAsync(q => q.Id == id);
    return book.Image;
}


-- BooksController.cs --

private string GetFileImg(string image)
{
    if (!string.IsNullOrWhiteSpace(image))
    {
        var imgPath = $"{_environment.ContentRootPath}\\images\\{image}";
        if (System.IO.File.Exists(imgPath))
        {
            byte[] imgBytes = System.IO.File.ReadAllBytes(imgPath);
            var file = Convert.ToBase64String(imgBytes);
            return file;
        }
    }

    return string.Empty;
}

private void StoreFileImg(string file, string image, string oldImage)
{
    if (image.Equals(oldImage))
    {
        if (System.IO.File.Exists($"{_environment.ContentRootPath}\\images\\{oldImage}"))
        {
            System.IO.File.Delete($"{_environment.ContentRootPath}\\images\\{oldImage}");
        }
    }

    if (!string.IsNullOrEmpty(file))
    {
        var imgPath = $"{_environment.ContentRootPath}\\images\\{image}";
        byte[] imageBytes = Convert.FromBase64String(file);
        System.IO.File.WriteAllBytes(imgPath, imageBytes);
    }
}


-> GetAllBooks():  
foreach (var item in booksDTO)
{
    item.File = GetFileImg(item.Image);
}

-> GetBookById(int id): 
bookDTO.File = GetFileImg(bookDTO.Image);

-> Create()
StoreFileImg(bookCreateDTO.File, bookCreateDTO.Image, "");

-> Update()
var oldImage = await _bookRepository.GetImageFileName(id);
StoreFileImg(bookCreateDTO.File, bookCreateDTO.Image, oldImage);


74. File Upload Support (List and Edit)

-- BookStore-UI-WASM -> Pages -> Books --
-- Delete.razor --

<div class="col-6">
    <img src="@string.Format("data:image/png;base64,{0}", Book.File)" />
    <h4 class="text-center text-info">@string.Format("{0:C}", Book.Price)</h4>
</div>

-- Index.razor --
<img src="@string.Format("data:image/png;base64,{0}", book.File)"/>

--Update.razor-- 
UI: <img src="@string.Format("data:image/png;base64,{0}", Book.File)" />

Code:


-- BooksController.cs --

-> Update()
var oldImage = await _bookRepository.GetImageFileName(id);
StoreFileImg(bookCreateDTO.File, bookCreateDTO.Image, oldImage);


75. Progressive Web Application