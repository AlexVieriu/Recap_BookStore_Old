@page "/books/update/{id:int}"


@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _bookRepo
@inject IAuthorRepository _authRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager
@inject IToastService _toastService


<h4>Update Book</h4>
<hr />
<br />

@if (Id < 1)
{
    <ErrorComponent Message="Id is less then 1" />
}
else if (Book == null)
{
    <InfoComponent Message="Loading..." />
}
else
{
<EditForm Model="Book" OnValidSubmit="HandleUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Book Title</label>
        <InputText @bind-Value="Book.Title" class="form-control" id="title" />
    </div>
    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText @bind-Value="Book.Isbn" class="form-control" id="isbn" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Book.Price" class="form-control" id="price" />
    </div>
    <div class="form-group">
        <label for="author">Authors</label>
        <select @bind="Book.AuthorId" class="form-control" id="author">
            <option value="">-- Select Author --</option>
            @if (Authors != null)
            {
                foreach (var author in Authors)
                {
                    <option value="@author.Id">@author.FirstName @author.LastName</option>
                }
            }
        </select>
    </div>

    <div class="form-group">
        <label for="summary">Summary</label>
        <InputTextArea @bind-Value="Book.Summary" class="form-control" id="summary" />
    </div>

    <div class="form-group">
        <label for="bookcover">Book Cover Photo</label>
        <InputFile OnChange="HandleFileSelection" />
        @if (isInvalidFileType)
        {
            <ErrorComponent Message="Please remove the invalid file type and select as new image, or leave this field blank" />
        }
        @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px;width:100px" />
        }
        else if (!string.IsNullOrWhiteSpace(Book.Image))
        {
            <img src="uploads/@Book.Image" style="height:100px;width:100px" />
        }
    </div>

    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Submit Changes
    </button>

    <a href="/books" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </a>

</EditForm>
}


@code{
    [Parameter]
    public int Id { get; set; }

    private Book Book = new();
    private IList<Author> Authors;
    private IBrowserFile file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private bool isFileChanged = false;
    private string imageDataURL;
    private Stream sFile;

    protected override async Task OnInitializedAsync()
    {
        Book = await _bookRepo.GetbyId(Endpoints.BookUrl, Id);
        Authors = await _authRepo.GetAll(Endpoints.AuthorUrl);
    }

    private async Task HandleUpdate()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                _fileUpload.RemoveFile(Book.Image);
                await _fileUpload.UploadFile(sFile, picName);

                Book.Image = picName;
            }
            else if (isFileChanged && file == null)
            {
                _fileUpload.RemoveFile(Book.Image);
                Book.Image = string.Empty;
            }

            isSuccess = await _bookRepo.Update(Endpoints.BookUrl, Book, Book.Id);
            if (isSuccess)
            {
                _toastService.ShowSuccess("Book Updated Successfully");
                _navManager.NavigateTo("/books");
            }
        }
    }


    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
        isFileChanged = true;
        if (file != null)
        {
            var ext = Path.GetExtension(file.Name);
            if (ext.Contains("jpg") || ext.Contains("png") || ext.Contains("jpeg"))
            {
                // image less the 10mb
                sFile = file.OpenReadStream(10960000);

                var resizedImageFile = await file.RequestImageFileAsync("image/png",
            100, 100);

                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                // pentru ca sa afisam img pe ecran inaite sa facem Update in db
                var imageBase64Data = Convert.ToBase64String(buffer);
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }
}