@page "/Register"

@inject IAuthentificationRepository _authRepo
@inject NavigationManager   _navManager


<h4 class="card-title">Register Now</h4>

@if (!result)
{
    <ErrorComponent Message="Registration Failed"/>
}

<div class="card-body">

    <EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="username">User Name</label>
            <InputText Id="username" class="form-control" @bind-Value="registerModel.UserName" />
            <ValidationMessage For="@(() => registerModel.UserName)" />
        </div>

        <div class="form-group">
            <label for="pass">Password</label>
            <InputText Id="pas" type="password" class="form-control" @bind-Value="registerModel.Password" />
            <ValidationMessage For="@(() => registerModel.Password)" />
        </div>

        <div class="form-group">
            <label>Confirmed Password</label>
            <InputText type="password" class="form-control" @bind-Value="registerModel.ConfirmedPassword" />
            <ValidationMessage For="@(() => registerModel.ConfirmedPassword)" />
        </div>

        <button type="submit" class="btn btn-primary btn-block">Register</button>

    </EditForm>

</div>



@code{
    private RegisterModel registerModel = new();
    private bool result = true;

    private async Task HandleRegistration()
    {
        result = await _authRepo.Register(registerModel);
        if (result)
        {
            _navManager.NavigateTo("/login");
        }
    }
}