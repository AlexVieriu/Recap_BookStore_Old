42. Create and Understand Blazor Project Structure

-- NavMenu.razor --

-> add NavBars	: Login		, Register	, Authors	, Books
-> add icons	: oi-globe	, oi-book	, oi-plus	, oi-list-rich	

﻿44. Setup HTTP Client And Service Repositories

-- BookStore_UI --

Create folders:
-> Services		: BaseRepository
-> Contracts	: IBaseRepository
-> Static		: EndPoints


-- EndPoint.cs --
-> create endpoints for : BaseUrl, AuthorUrl, BookUrl, LoginUrl, RegisterUrl

-- IBaseRepository.cs --

Task<IList<T>>	GetAll(string url)
Task<T>			GetbyId(string url, int id) 
Task<bool>		Create(string url, T obj)
Task<bool>		Delete(string url, int id)
Task<T>			Update(string url, int id, T obj) 


-- BaseRepository.cs --
-> GetAll(), GetbyId(), Create(), Update(), Delete()


45. Setup User Registration API Endpoint

-- BookStore-API -> DTOs --

Validation: UserDTOs 


-- Controllers -> AuthorController.cs --

-> add [Route] to Actions that have the same Verbs so we will not have conflicts

[Route("login")]
[Route("register")]


[HttpPost]
[Route("register")]
[ProducesResponseType(StatusCodes.Status200OK)]
[ProducesResponseType(StatusCodes.Status500InternalServerError)]
public async Task<IActionResult> Register([FromBody] UserDTO userDTO)
{
    var location = GetControllerActionName();
    try
    {
        var userName = userDTO.UserName;
        var userPassword = userDTO.UserPassword;

        var newUser = new IdentityUser() { UserName = userName };

        _logger.LogInfo($"Attempted to create {userName}");
        var userCreated = await _userManager.CreateAsync(newUser);
                
        if(userCreated.Succeeded == false)
        {
            foreach(var error in userCreated.Errors)
            {
                _logger.LogError($"{location} : {error.Code} - {error.Description}");
            }
            return StatusCode(500, $"The {userName} couldn't be saved");
        }

        return Ok("User Created");
    }

    catch (Exception e)
    {
        return InternalError(e, location);                
    }
}

-> add documentation to the Action methods



46. Setup User Registration Form

-- BookStore_UI --

-> add RegisterEndpoint : RegisterUrl = $"{BaseUrl}/Users/Register/"

-> Models:	RegisterModel.cs	(UserName, Password, ConfirmedPassword)
			LoginModel.cs		(UserName, Password)

[Required]      : UserName, Password, ConfirmedPassword
[Diplay]        : UserName
[StringLength]  : Password
[Compare]       : ComparePassword


Services    : IAuthenticationRepository.cs (Register)
Contracts   : AuthenticationRepository.cs  (Register)


-- AuthenticationRepository.cs --



-- Pages -> Users -> Register.razor --

UI:    

inject IAuthorrepository _authorRepo
inject NavigationManager navManager


-> add card : card-title 
			  display msg if registration failed
			  card-body  -> <EditForm>	-> 3 <div> : <label>, <InputText>, <ValidationMessage For="">
										-> <button type="submit">
										-> UserName, Password, ConfirmedPassword	


@code: 

RegisterModel registerModel = new();
bool errorRegister = false;

private void HandleRegistration()
{
    var isSuccess = await _authorRepo.Register(registerModel);
    if(isSuccess)
    {
        navManager.NavigateTo("/");
    }
    else
    {   
        errorRegister= true;
    }
}


