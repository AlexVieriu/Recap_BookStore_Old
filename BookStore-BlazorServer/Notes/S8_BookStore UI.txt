42. Create and Understand Blazor Project Structure

-- NavMenu.razor --

-> add NavBars	: Login		, Register	, Authors	, Books
-> add icons	: oi-globe	, oi-book	, oi-plus	, oi-list-rich	

﻿44. Setup HTTP Client And Service Repositories

-- BookStore_UI --

Create folders:
-> Contracts	: IBaseRepository
-> Services		: BaseRepository
-> Static		: EndPoints


-- EndPoint.cs --
-> create endpoints for : BaseUrl, AuthorUrl, BookUrl, LoginUrl, RegisterUrl

-- IBaseRepository.cs --
-> Get(), Get(), Create(), Update(), Delete()

-- BaseRepository.cs --
-> Get(), Get(), Create(), Update(), Delete()


45. Setup User Registration API Endpoint

-- BookStore-API --

-> add validations to UserDTOs
-> add route to Register , Login actions
-> create Register action:
	try:	-> declare IdentityUser() obj
			-> create IdentityUser() using _userManager
			-> add validation if the creation fail
			-> return Ok();
	catch:	-> InternalError()
-> add documentation 



46. Setup User Registration Form

-- BookStore_UI --

-> add RegisterEndpoint

-> Models:	RegisterModel.cs	(UserName, Password, ConfirmedPassword)
			LoginModel.cs		(UserName, Password)


Create 2 classes: 

IAuthenticationRepository.cs	: Register() 
AuthenticationRepository.cs		: Register()

-> create the Register() method


-- Startup.cs --

-> add AuthenticationRepository.cs , IAuthenticationRepository.cs


-- Pages -> Users -> Register.razor--

UI:
-> add card : card-title 
			  display msg if registration failed
			  card-body  -> <EditForm>	-> 3 <div> : <label>, <InputText>, <ValidationMessage For="">
										-> <button>
										-> UserName, Password, ConfirmedPassword			 
				
@code: 
-> declare RegisterModel
-> declare a prop that know if the registration failed or not
-> create method for ValidationSubmit: HandleRegistration()


47. Setup User Login - Extend Blazor Authentication Provider

Static -> LoginUrl
Models -> LoginModel.cs, TokenResponse.cs

-> install LocalStorage, Tokens.JWT

-- Startup.cs --
-> add LocalStorage, JwtSecurityTokenHandler


-- BookStore_UI.Servicies.Contracts -- 
IAuthenticationRepository.cs : Register(), Login(), Logout()


-- Provider -> ApiAuthenticationStateProvider.cs --

-> GetAuthenticationStateAsync()
-> LoggedIn()
-> LoggedOut()

-> override GetAuthenticationStateAsync()
	try:	-> get the token and store it as string 
			-> check if there is a token, if true, return an empty AuthenticationState object
			-> read the JWT
			-> check the expiry date, return an empty AuthenticationState object if expired
			-> get the claims from token and build auth user object
			-> return authenticated person
	
	catch:	-> return an empty AuthenticationState

-> create : IList<Claim> ParseClaims(JwtSecurityToken tokenContent) 
	-> get the Claims and put it in a List
	-> add a new Claim to the List: (ClaimTypes.Name, tokenContent.Subject);
	-> return the claims


-> LoggedIn()
	-> get the token as string
	-> converted as JWT
	-> add claim using ParseClaims() method
	-> build user
	-> check what is the AuthenticationState()
	-> NotifyAuthenticationStateChanged()

-> LoggedOut()
	-> create a empty new ClaimPrincipal();
	-> check what is the AuthenticationState() 
	-> NotifyAuthenticationStateChanged()




