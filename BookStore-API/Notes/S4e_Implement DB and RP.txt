13. Create Database in SQL Server
-- appsetting.json --

"ConnectionStrings": {
    "DefaultConnection": "Server=DESKTOP-TJTCLO2;Database=BookStore;Trusted_Connection=True;"
  }

Create Tables:
Tables:  Authors (Id, Firstname(50), LastName(50), Bio(MAX)), 
		 Books   (Id, Title, Year, ISBN, Summary, Image, Price, AuthorId) (with FOREIGN KEY)


14. Implement Data Classes and Entity Framework

Create 2 Classes: 
-> Data -> Book.cs	: Id, Firstname, LastName, Bio
		-> Author.cs: Id, Title, Year, ISBN, Summary, Image, Price, AuthorId

Partial Class : https://www.geeksforgeeks.org/partial-classes-in-c-sharp/
-> provides a special ability to implement the functionality of a single class into multiple files

Important points:

-> when you want to chop the functionality of the class, method, interface, or structure into multiple files, 
then you should use partial keyword and all the files are mandatory to available at compile time for creating final file.
-> the partial modifier can only present instantly before the keywords like struct, class, and interface.
-> every part of the partial class definition should be in the same assembly and namespace, but you can use different source file name.
-> every part of the partial class definition should have the same accessibility like private, protected, etc.
-> if any part of the partial class is declared as an abstract, sealed, or base, then the whole class is declared of the same type.
-> the user is also allowed to use nested partial types.
-> dissimilar part may have dissimilar base types, but the final type must inherit all the base types.

Advantages :

-> with the help of partial class multiple developers can work simultaneously on the same class in different files.
-> with the help of partial class concept you can split the UI of design code and the business logic code to read and understand the code.
-> when you were working with automatically generated code, the code can be added to the class without having to recreate the source file like in Visual studio.
-> you can also maintain your application in an efficient manner by compressing large classes into small ones.


-- ApplicationDbContext.cs --

-> i'm looking for the table Authors and i'm using the class Author

public DbSet<Author> Authors { get; set; }
public DbSet<Book> Books { get; set; }


15. Scaffold-DbContext Command

Manually creating the classes
Tools -> NuGet Package Manger -> Package Manger Console :

Scaffold-DbContext [-Connection] [-Provider] [-OutputDir] [-Context] [-Schemas>] [-Tables>] 
                    [-DataAnnotations] [-Force] [-Project] [-StartupProject] [<CommonParameters>]

In this specific context ,the command would have been:
PM> Scaffold-DbContext "Server=.\SQLExpress;Database=BookStore;Trusted_Connection=True;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Data

16. Setup AutoMapper and DTOs(Data transfer Objects)

-> we use mapping so we don't interact directly with the DB classes
-> get NugetPackages for mapping
-> put mapper in the ConfigureServicies

-> create Mapper folder : Mappings
-> create Mapper.cs

-> create DTO folder : DTOs
-> create DTO classes : AuthorDTO.cs(Id, Firstname, LastName, Bio)
						BookDTO.cs	(Id, Title, Year, ISBN, Summary, Image, Price, AuthorId)

